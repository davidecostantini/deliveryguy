#!/usr/bin/env python
import sys

instructions_path="instructions.json"
app_version="1.0"
# ---------------------------------------------------------------
process_error=False

class bcolors:
    HEADER = '\033[95m'
    OKCYAN = '\033[36m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def printMsg(kMsgDesc,kQuit=False,kError=False):
    msg=getDate() + " - " + getHostname() + " - " + kMsgDesc
    if kError:
        print bcolors.FAIL + msg + bcolors.ENDC
    else:
        print bcolors.OKCYAN + msg + bcolors.ENDC

    if kQuit:
        import sys
        sys.exit(1)

def checkFileExistence(kFileToCheck):
    import os
    return os.path.isfile(kFileToCheck)

def checkFolderExistence(kFolderToCheck):
    import os
    return os.path.isdir(kFolderToCheck)

def getHostname():
    from socket import gethostname
    return str(gethostname())

def getDate():
    import datetime
    return str(datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

def loadJsonFile(filePath):
    import json
    try:
        data = json.loads(open(filePath).read())
        return data

    except:
        printMsg ("You're a bad boy! The JSON launch config is not correct. Go and check...",True,True)

def runScript(kScript):
    from subprocess import call
    try:
        call([kScript])

    except:
        printMsg ("runScript todo",True,True)

def copyFile(kSource,kDestination):
    global process_error
    import shutil
    try:
        shutil.copyfile(kSource,kDestination)

    except:
        process_error=True
        printMsg ("Error while copying " + kSource + " to " + kDestination,False,True)

def pullRepo(kUrl,kDestination):
    import subprocess as sp
    try:
        #Delete destination folder if exist
        if checkFolderExistence(kDestination):
            printMsg("Deleting folder " + kDestination)
            sp.call(["rm", "-rf", kDestination])

        child = sp.Popen(["git", "clone", kUrl, kDestination], stdout=sp.PIPE)
        streamdata = child.communicate()[0]
        rc = child.returncode
        print rc
        if rc <> 0:
            raise Exception("")

    except:
        printMsg ("Error while cloning/pulling " + kUrl + " to " + kDestination,True,True)

def main(kRepoPulled):
    import datetime

    printMsg("Working on " + instructions_path)

    if not checkFileExistence(instructions_path):
        printMsg("instructions_path not found",True,True)

    #Load JSON
    instructions=loadJsonFile(instructions_path)

    #Pull repo if any and if not already pulled by param
    repo=instructions["repo"][0]
    if len(str(repo["url"])) > 0:
        if not RepoPulled:
            printMsg("Found repo")

            #Check script before copy
            if len(repo["run_before"]):
                printMsg("Exec script " + repo["run_before"])
                runScript(repo["run_before"])

            printMsg("Cloning " + repo["url"] + "...")
            pullRepo(kRepo["url"],kRepo["destination"])

            #Check script after copy
            if len(repo["run_after"]):
                printMsg("Exec script " + repo["run_after"])
                runScript(repo["run_after"])

        else:
            printMsg("Repo but skipped because has been passed REPO arg") 

    #Cycle instructions
    for task in instructions["instructions"]:

        #Filter by target
        if task["target"] == getHostname() or task["target"] == "*":

            #Check if a value has been specified
            if len(task["source"]) > 0 and len(task["destination"]) > 0:
                printMsg("Working on " + task["source"])

                #Check script before copy
                if len(task["run_before"]):
                    printMsg("Exec script " + task["run_before"])
                    runScript(task["run_before"])

                #Copy file
                copyFile(task["source"], task["destination"])

                #Check script after copy
                if len(task["run_after"]):
                    printMsg("Exec script " + task["run_after"])
                    runScript(task["run_after"])

    if process_error:
        printMsg("Process terminated with errors",False,True)
    else:
        printMsg("Process finished successfully")

if __name__ == "__main__":
    import argparse

    RepoPulled=False
    #Parse params
    parser = argparse.ArgumentParser(prog='deliveryguy')
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('-config', action='store', dest='json_config',
                        help='Config JSON')
    group.add_argument('-repo', action='store', dest='repo_url',
                        help='Repo URL')
    parser.add_argument('--version', action='version', version='%(prog)s ' + app_version)

    args=parser.parse_args()

    #Pull repo to TMP
    if (args.repo_url != None):
        printMsg("Pulling repo " + args.repo_url + " to tmp folder /tmp/deliveryguy")
        pullRepo(args.repo_url,"/tmp/deliveryguy")
        printMsg("Try to locate instructions.json inside repo at /tmp/deliveryguy")
        instructions_path="/tmp/deliveryguy/instructions.json"
        RepoPulled=True

    elif len(args.json_config)>0:
        instructions_path=args.json_config
    
    #Start main process
    main(RepoPulled)